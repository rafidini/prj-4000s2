/* 
   Operateur de regulation haute ou basse
   d'apres: "Topological Approach to Image Segmentation" 
            G. Bertrand, J.C. Everat, M. Couprie 

   entrees: K, un leveling kernel au sens des minima;
            mode, un entier egal a 0 pour la regularisation basse, 
                  a 1 pour la haute, et a 2 pour les deux.

   regul haute : 
     K[x] - K[R] < (K[x] - K[Rp]) * alpha 
       devient:
     mu < 256         avec
     mu = K[x] - K[R] - (K[x] - K[Rp]) * alpha + 256

   regul basse : 
     K[x] - K[R] < (PSI[R] - K[R]) * alpha
       devient:
     nu < 256         avec
     nu = K[x] - K[R] - (PSI[R] - K[R]) * alpha + 256

   pour la version hierarchique, on encode avec l'index du point la direction du minimum
   voisin concerne : 
     x       ->        minimum = voisin EST
     x + N   ->        minimum = voisin NORD
     x + 2N  ->        minimum = voisin OUEST
     x + 3N  ->        minimum = voisin SUD
   on utilise le bit 31 (poids fort) pour indiquer la regularisation basse.
*/

/* Michel Couprie - aout 1997 */

#include <stdio.h>
#include <stdlib.h>
#include <mcutil.h>
#include <mclifo.h>
#include <mcindic.h>
#include <mccodimage.h>
#include <lregul.h>
#include <mcfah.h>

#define MINIMUM      0
#define UPPER        1
#define TRAITE       2
#define CANDIDAT     3
#define MINATRAITER  4
/*
#define DEBUG
#define TRACE
*/

#define MASK31  0x80000000
#define MASK31b 0x7fffffff

/* ==================================== */
int lregul(struct xvimage * lvkern, int mode, double alpha, int *nbreg)
/* ==================================== */
{
  int k, kk;
  unsigned long x, y, w, yy;
  unsigned long nbmin, min1, min2;
  unsigned char *K;
  unsigned char *PSI;
  int rs, cs, d, N;
  Lifo * LIFO;
  unsigned char psi;
  int flag;
  unsigned char altmin;
  Fah * FAH;
  unsigned long nbupper;
  int mu, nu, numax;
  int dir, dir1, dir2;

  if (depth(lvkern) != 1) 
  {
    fprintf(stderr, "lregul: cette version ne traite pas les images volumiques\n");
    exit(0);
  }

  rs = rowsize(lvkern);
  cs = colsize(lvkern);
  N = rs * cs;
  K = UCHARDATA(lvkern);  

  PSI = (unsigned char *)malloc(N * sizeof(char));
  if (PSI == NULL) 
  {
    fprintf(stderr, "lregul: malloc failed for PSI\n");
    exit(0);
  }

  IndicsInit(N);

  LIFO = CreeLifoVide(N);
  if (LIFO == NULL)
  {   fprintf(stderr, "lregul() : CreeLifoVide failed\n");
      return(0);
  }

  *nbreg = 0;

  /* ---------------------------------------------------------- */
  /* etiquette les 4-minima avec le label MINIMUM recueuille le PSI associe */
  /* ---------------------------------------------------------- */

  for (x = 0; x < N; x++)
  {
    if (!IsSet(x, TRAITE))
    {
      psi = NDG_MIN;
      flag = MINIMUM;

      Set(x, CANDIDAT);           /* 1er parcours */
      LifoPush(LIFO, x);
      while (! LifoVide(LIFO))
      {
        w = LifoPop(LIFO);
        for (k = 0; k < 8; k += 2)
        {
          y = voisin(w, k, rs, N);
          if (y != -1)
          {
            if (K[y] < K[w]) /* w non dans un minimum */
              flag = UPPER;
            else
            if (K[y] > K[w])
	    {
              if (K[y] > psi) 
                psi = K[y];
	    }
            else /* K[y] == K[w] */ 
            if (!IsSet(y, CANDIDAT))
            {
              Set(y, CANDIDAT);
              LifoPush(LIFO, y);
            } /* if K ... */
          } /* if (y != -1) */
        } /* for k ... */
      } /* while (! LifoVide(LIFO)) */

      Set(x, TRAITE);           /* 2nd parcours */
      Set(x, flag);
      PSI[x] = psi;
      LifoPush(LIFO, x);
      while (! LifoVide(LIFO))
      {
        w = LifoPop(LIFO);
        for (k = 0; k < 8; k += 2)
        {
          y = voisin(w, k, rs, N);
          if (y != -1)
          {
            if ((K[y] == K[w]) && (!IsSet(y, TRAITE)))
            {
              Set(y, TRAITE);
              Set(y, flag);
              PSI[y] = psi;
              LifoPush(LIFO, y);
            } /* if K ... */
          } /* if (y != -1) */
        } /* for k ... */
      } /* while (! LifoVide(LIFO)) */

    } /* if (LABEL[x] == 0) */
  } /* for (x = 0; x < N; x++) */

#ifdef DEBUG
  for (x = 0; x < N; x++)
  {
    if (x % rs == 0) printf("\n");
    if (IsSet(x, MINIMUM)) printf("%3d ", PSI[x]); else printf("%3d ", 0);
  }
  printf("\n");
#endif

  nbupper = 0;
  for (x = 0; x < N; x++) if (IsSet(x, UPPER)) nbupper++;
  FAH = CreeFahVide(nbupper + 1);
  if (FAH == NULL)
  {   fprintf(stderr, "lregul() : CreeFahVide failed\n");
      return(0);
  }

  /* ---------------------------------------------------------- */
  /* regularisation */
  /* ---------------------------------------------------------- */

  FahPush(FAH, -1, 0);
  for (x = 0; x < N; x++)          
  {
    if (IsSet(x, UPPER))
    {
      int empile = 0;

      /* pour la regularisation basse */
      numax = NDG_MIN;            /* on cherche le nu le plus grand */
      /* si le upper-point x est irregulier, il est mis dans la FAH */
      for (k = 0; k < 8; k += 2)
      {
        y = voisin(x, k, rs, N);
        if ((y != -1) && (IsSet(y, MINIMUM)))
        {
          nu = (int)(K[x] - K[y] - (PSI[y] - K[y]) * alpha + 256);
          if (nu > numax) { numax = nu; dir = k; }
	} /* if ((y != -1) && (IsSet(y, MINIMUM))) */
      } /* for k ... */
      if ((numax == NDG_MIN) || (numax > 256)) numax = 256;
/* MODIF */
      else numax = K[x] - K[y];

      /* pour la regularisation haute */
      /* on ne s'interesse qu'aux upper-points separant deux minima 
         d'altitudes differentes */
      nbmin = 0;
      for (k = 0; k < 8; k += 2)
      {
        y = voisin(x, k, rs, N);
        if ((y != -1) && (IsSet(y, MINIMUM)))
        {
          if (nbmin == 0) 
          {
            nbmin++;
            min1 = y;
            dir1 = k;
          }
          else
          if (K[y] != K[min1])
          {
            nbmin++;
            min2 = y;
            dir2 = k;
            break;              
          }
        }
      } /* for k ... */
      if (nbmin == 2)
      {
        mu = (int)(K[x] - K[min1] - (K[x] - K[min2]) * alpha + 256);
	/* if ((mu < 256) && ((mu > numax) || (numax == 256)))*/
/* MODIF */
	if ((mu < 256) && ((K[x] - K[min1] < numax) || (numax == 256)))
        {
          /* FahPush(FAH, x + (dir1 / 2) * N, (unsigned char)mu); */
/* MODIF */
          FahPush(FAH, x + (dir1 / 2) * N, K[x] - K[min1]);
          empile = 1;
#ifdef TRACE
printf("FahPush(x=%d,%d; dir=%d; mu=%d; K[x]=%d; K[R]=%d; K[Rp]=%d)\n", 
                x%rs, x/rs, dir1, mu, K[x], K[min1], K[min2]);
#endif
        }
        mu = (int)(K[x] - K[min2] - (K[x] - K[min1]) * alpha + 256);
        /* if ((mu < 256) && ((mu > numax) || (numax == 256))) */
/* MODIF */
        if ((mu < 256) && ((K[x] - K[min2] < numax) || (numax == 256)))
        {
          /* FahPush(FAH, x + (dir2 / 2) * N, (unsigned char)mu); */
/* MODIF */
          FahPush(FAH, x + (dir2 / 2) * N, K[x] - K[min2]);
          empile = 1;
#ifdef TRACE
printf("FahPush(x=%d,%d; dir=%d; mu=%d; K[x]=%d; K[R]=%d; K[Rp]=%d)\n", 
                x%rs, x/rs, dir2, mu, K[x], K[min2], K[min1]);
#endif
	}
      } /* if (nbmin == 2) */
      if (!empile && (numax < 256))
      {
        FahPush(FAH, (x + (dir / 2) * N) | MASK31, (unsigned char)numax);
#ifdef TRACE
printf("FahPush(x=%d,%d; dir=%d; nu=%d)\n", x%rs, x/rs, dir, nu);
#endif
      }
    } /* if (IsSet(x, UPPER)) */
  } /* for (x = 0; x < N; x++) */
  (void)FahPop(FAH);

  while (!FahVide(FAH))
  {
#ifdef TRACE
psi = FahNiveau(FAH); 
#endif
    x = FahPop(FAH);
    if (x & MASK31) mode = 0; else mode = 1;
    x &= MASK31b;
    if (x < N)            dir1 = 0;
    else if (x < 2 * N) { dir1 = 2; x -= N; }
    else if (x < 3 * N) { dir1 = 4; x -= 2 * N; }
    else                { dir1 = 6; x -= 3 * N; }
#ifdef TRACE
printf("FahPop(x=%d,%d; dir=%d, lv=%d)\n", x%rs, x/rs, dir1, psi);
#endif
      
    if (mode == 1)
    {  
      min1 = voisin(x, dir1, rs, N);
      if (IsSet(min1, MINIMUM))
      {                                /* regularise le minimum min1 */
#ifdef TRACE
printf("Regularise %d,%d\n", min1%rs, min1/rs);
#endif
        *nbreg += 1;
        altmin = K[min1];
        K[min1] = K[x];
        UnSetAll(min1);  /* reset (notamment) les flags MINIMUM et TRAITE */
        LifoPush(LIFO, min1);
        while (! LifoVide(LIFO))
        {
          w = LifoPop(LIFO);
          for (k = 0; k < 8; k += 2)
          {
            y = voisin(w, k, rs, N);
            if ((y != -1) && (K[y] == altmin) && (IsSet(y, TRAITE)))
            { 
              K[y] = K[x];
              UnSetAll(y);  /* reset (notamment) les flags MINIMUM et TRAITE */
              LifoPush(LIFO, y);
            } /* if (y != -1) */
          } /* for k ... */
        } /* while (! LifoVide(LIFO)) */
      } /* if (IsSet(y, MINIMUM)) */
    } /* if (mode != 1) */
    else
    {      
      min1 = voisin(x, dir1, rs, N);
      if (IsSet(min1, MINIMUM))
      {                
        unsigned long nbpts = 0;
        unsigned long altcumul = 0;
        unsigned char altmoy;
        *nbreg += 1;
        K[x] = K[min1];
        /* si dans le voisinage de x il y a des points de minima, 
           il faut demarquer ces minima 
           et leur donner l'altitude de la moyenne de tous les minima. */
        for (k = 0; k < 8; k += 2)
        {
          y = voisin(x, k, rs, N);
          if ((y != -1) && (IsSet(y, MINIMUM)))
	  {
            altmin = K[y];
            UnSet(y, MINIMUM);
            Set(y, MINATRAITER);
            nbpts ++;
            altcumul += altmin;
            LifoPush(LIFO, y);
            while (! LifoVide(LIFO))
            {
              w = LifoPop(LIFO);
              for (kk = 0; kk < 8; kk += 2)
              {
                yy = voisin(w, kk, rs, N);
                if ((yy != -1) && (K[yy] == altmin) && (IsSet(yy, MINIMUM)))
                { 
                  UnSet(yy, MINIMUM);
                  Set(yy, MINATRAITER);
                  nbpts ++;
                  altcumul += altmin;
                  LifoPush(LIFO, yy);
                } /* if (y != -1) */
              } /* for k ... */
            } /* while (! LifoVide(LIFO)) */
	  } /* ((y != -1) && (IsSet(y, MINIMUM)) && (K[y] > K[x])) */
        } /* for k ... */

        altmoy = (unsigned char)(altcumul / nbpts);

        for (k = 0; k < 8; k += 2)
        {
          y = voisin(x, k, rs, N);
          if ((y != -1) && (IsSet(y, MINATRAITER)))
	  {
            altmin = K[y];
            K[y] = altmoy;
            UnSet(y, MINATRAITER);
            LifoPush(LIFO, y);
            while (! LifoVide(LIFO))
            {
              w = LifoPop(LIFO);
              for (kk = 0; kk < 8; kk += 2)
              {
                yy = voisin(w, kk, rs, N);
                if ((yy != -1) && (K[yy] == altmin) && (IsSet(yy, MINATRAITER)))
                { 
                  K[yy] = altmoy;
                  UnSet(yy, MINATRAITER);
                  LifoPush(LIFO, yy);
                } /* if (y != -1) */
              } /* for k ... */
            } /* while (! LifoVide(LIFO)) */
	  } /* ((y != -1) && (IsSet(y, MINIMUM)) && (K[y] > K[x])) */
        } /* for k ... */

      } /* if (IsSet(min1, MINIMUM)) */
    } /* else if (mode != 1) */
  } /* while (!FahVide(FAH)) */

  LifoTermine(LIFO);
  return 1;
}
