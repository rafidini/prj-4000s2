/* operateur de calcul du noyau de homotopique par abaissement */
/* methode: saturation par etapes - utilise 2 fifos */
/* note : des LIFOs seraient mieux adaptees pour cette version */
/* Michel Couprie -  janvier 1998 */

#include <stdio.h>
#include <mccodimage.h>
#include <mcimage.h>
#include <mcfifo.h>
#include <mctopo.h>
#include <mcindic.h>
#include <lhtkern.h>

#define EN_FIFO       0
#define PARANO
/*
#define DEBUG
#define NDG
*/

#define BINAIRE

#define VERBOSE

/* ==================================== */
int bordext4(unsigned char *SOURCE, int x, int rs, int N)
/* ==================================== */
/* teste si x a un 4-voisin a 0 */
{
  int k, y;
  for (k = 0; k < 8; k += 2) /* parcourt les voisins en 4-connexite */
  {
    y = voisin(x, k, rs, N);
    if ((y != -1) && (SOURCE[y] == 0)) return 1;
  } /* for k */      
  return 0;
} /* bordext4() */

/* ==================================== */
int testabaisse4(unsigned char *SOURCE, int x, int rs, int N)
/* ==================================== */
{
  int modifie = 0;

#ifdef DEBUG
printf("testabaisse4 : point %d (%d %d), val = %d\n", x, x%rs, x/rs, SOURCE[x]);
#endif

  while (pdestr4(SOURCE,x,rs,N)) 
  { 
    modifie = 1; 
    SOURCE[x] = alpha8m(SOURCE,x,rs,N); /* alpha8m : sic */
  }

#ifdef DEBUG
if (modifie) printf("========> ABAISSE : %d\n", SOURCE[x]);
#endif

  return modifie;
} /* testabaisse4() */

/* ==================================== */
int testabaisse8(unsigned char *SOURCE, int x, int rs, int N)
/* ==================================== */
{
  int modifie = 0;

#ifdef DEBUG
printf("testabaisse8 : point %d (%d %d), val = %d\n", x, x%rs, x/rs, SOURCE[x]);
#endif

  while (pdestr8(SOURCE,x,rs,N)) 
  { 
    modifie = 1; 
    SOURCE[x] = alpha8m(SOURCE,x,rs,N); 
  }

#ifdef DEBUG
if (modifie) printf("========> ABAISSE : %d\n", SOURCE[x]);
#endif

  return modifie;
} /* testabaisse8() */

/* ==================================== */
int lhtkern(struct xvimage *image, int nitermax, int connex)
/* ==================================== */
{ 
  int i;
  int x;                       /* index muet de pixel */
  int y;                       /* index muet (generalement un voisin de x) */
  int z;                       /* index muet (generalement un voisin de y) */
  int k;                       /* index muet */
  int rs = rowsize(image);     /* taille ligne */
  int cs = colsize(image);     /* taille colonne */
  int N = rs * cs;             /* taille image */
  unsigned char *SOURCE = UCHARDATA(image);      /* l'image de depart */
  int niter;                   /* nombre d'iterations effectuees (4 directions) */
  Fifo * FIFO1;
  Fifo * FIFO2;
  Fifo * FIFOtmp;

  if (depth(image) != 1) 
  {
    fprintf(stderr, "lhtkern: cette version ne traite pas les images volumiques\n");
    exit(0);
  }

  IndicsInit(N);

  FIFO1 = CreeFifoVide(N);
  FIFO2 = CreeFifoVide(N);
  if ((FIFO1 == NULL) || (FIFO2 == NULL))
  {   fprintf(stderr, "lhtkern() : CreeFifoVide failed\n");
      return(0);
  }

#ifdef VERBOSE
  printf("N = %d ; connex = %d ; nitermax = %d\n", N, connex, nitermax);
#endif

  /* ================================================ */
  /*                  DEBUT ALGO                      */
  /* ================================================ */

#ifdef NDG
  /* ========================================================= */
  /*   INITIALISATION DE LA FIFO: empile tous les points destructibles */
  /* ========================================================= */

  if (connex == 4)
  {
    for (x = 0; x < N; x++) if (pdestr4(SOURCE,x,rs,N)) FifoPush(FIFO1, x);
  }
  else
  {
    for (x = 0; x < N; x++) if (pdestr8(SOURCE,x,rs,N)) FifoPush(FIFO1, x);
  }
#endif

#ifdef BINAIRE
  /* ========================================================= */
  /*   INITIALISATION DE LA FIFO: empile les 4-voisins != 0 des points 0 */
  /* ========================================================= */

  for (x = 0; x < N; x++)
  {
    if (SOURCE[x] == 0)
      for (k = 0; k < 8; k += 2) /* parcourt les voisins en 4-connexite */
      {                                      /* pour empiler les voisins */
        y = voisin(x, k, rs, N);             /* non deja empiles */
        if ((y != -1) && (SOURCE[y]) && (! IsSet(y, EN_FIFO)))
        {
          FifoPush(FIFO1, y);
          Set(y, EN_FIFO);
        } /* if y */
      } /* for k */      
  }
#endif

  /* ================================================ */
  /*                  DEBUT SATURATION                */
  /* ================================================ */

  niter = 0;

if (connex == 4)
{
  while (!FifoVide(FIFO1) && ((nitermax == 0) || (niter < nitermax)))
  {
    niter++;

#ifdef VERBOSE
  printf("niter = %d\n", niter);
#endif

    /* enleve toutes les etiquettes EN_FIFO */
    i = (FIFO1->In + 1) % FIFO1->Max;
    do
    {
      x = FIFO1->Pts[i];
      UnSet(x, EN_FIFO);
      i = (i + 1) % FIFO1->Max;
    } while (i != FIFO1->Out);

    while (!FifoVide(FIFO1))
    {
      x = FifoPop(FIFO1);
      if (testabaisse4(SOURCE, x, rs, N))         /* modifie l'image le cas echeant */
      {
        for (k = 0; k < 8; k += 1) /* parcourt les voisins en 8-connexite */
        {                                      /* pour empiler les voisins */
          y = voisin(x, k, rs, N);             /* non deja empiles */
          if ((y != -1) && (! IsSet(y, EN_FIFO)))
          {
            if (pdestr4(SOURCE,y,rs,N)) 
            {
              FifoPush(FIFO2, y);
              Set(y, EN_FIFO);
            }
          } /* if y */
        } /* for k */      
      } /* if (testabaisse4(SOURCE, x, rs, N)) */
    } /* while (!FifoVide(FIFO1)) */

    FIFOtmp = FIFO1; FIFO1 = FIFO2; FIFO2 = FIFOtmp;

  } /* while (! (FifoVide(FIFO1) ...)) */
} /* if (connex == 4) */
else
{
  while (!FifoVide(FIFO1) && ((nitermax == 0) || (niter < nitermax)))
  {
    niter++;

#ifdef VERBOSE
  printf("niter = %d\n", niter);
#endif

    /* enleve toutes les etiquettes EN_FIFO */
    i = (FIFO1->In + 1) % FIFO1->Max;
    do
    {
      x = FIFO1->Pts[i];
      UnSet(x, EN_FIFO);
      i = (i + 1) % FIFO1->Max;
    } while (i != FIFO1->Out);

    while (!FifoVide(FIFO1))
    {
      x = FifoPop(FIFO1);
      if (testabaisse8(SOURCE, x, rs, N))         /* modifie l'image le cas echeant */
      {
        for (k = 0; k < 8; k += 1) /* parcourt les voisins en 8-connexite */
        {                                      /* pour empiler les voisins */
          y = voisin(x, k, rs, N);             /* non deja empiles */
          if ((y != -1) && (! IsSet(y, EN_FIFO)))
          {
#ifdef NDG
            if (pdestr8(SOURCE,y,rs,N)) 
#endif
#ifdef BINAIRE
            if (bordext4(SOURCE,y,rs,N))  /* teste si y a un 4-voisin a 0 */
#endif
            {
              FifoPush(FIFO2, y);
              Set(y, EN_FIFO);
            }
          } /* if y */
        } /* for k */      
      } /* if (testabaisse8(SOURCE, x, rs, N)) */
    } /* while (!FifoVide(FIFO1)) */

    FIFOtmp = FIFO1; FIFO1 = FIFO2; FIFO2 = FIFOtmp;

  } /* while (! (FifoVide(FIFO1) ...)) */
}

  /* ================================================ */
  /* UN PEU DE MENAGE                                 */
  /* ================================================ */

  IndicsTermine();
  FifoTermine(FIFO1);
  FifoTermine(FIFO2);
  return(1);
}
