// UjoImro, 2009
// This software is meant to be free
// The pink python wrapper core file

#include <pink_python.h>

using namespace boost::python;
using namespace pink;

// maybe I'll get away with it
#include <pyujimage.hpp>

// declarations
void py_hello_export(); 
void deep_xvimage_object_export();
void shallow_xvimage_object_export();
void xvimage_object_export();
void py_readimage_export(); 
// void py_writeimage_export();
void vint_object_export(); 
void vector_int_object_export();
void py_wshedtopo_export();
void py_erosball_export();
void py_medianfilter_export();

// skeleton function
void py_skeleton_im_int_int_void_export();
void py_skeleton_im_im_int_void_export();
void py_skeleton_im_int_int_im_export();
void py_skeleton_im_im_int_im_export();
void py_skeleton_im_int_int_int_export();
void py_skeleton_im_im_int_int_export();

void py_zoom_export();
void py_long2byte_export();


void py_dilat_export();
void py_eros_export();
void py_geodilat_export();
void py_geoeros_export();
void py_geoeros_export();
void py_opening_export();
void py_drawcurve_export();

void py_maxflow_export();
void uiSqhool_object_export();
void py_gradient_export();
void py_float2byte_export();
void py_minmaxval_export();

DECLARE_WRAPPER(resample_image);

// for wrapping every type with one function
template <class object_type, class pixel_type>
void ujoi_object_export( const char* object_name, const char* object_description );


BOOST_PYTHON_MODULE(cpp_pink) // the final modul will be named pink, but that will also contain
                              // some python functions, like readimage, so it will be created as
                              // a tree hierarchy
{

  py_hello_export(); // the test function 'greet()'
  vector_int_object_export();
  xvimage_object_export(); // self explaining
  deep_xvimage_object_export(); // self explaining
  shallow_xvimage_object_export(); // self explaining
  py_readimage_export(); // self explaining
//  py_writeimage_export(); // self explaining
  vint_object_export(); // self explaining
  py_wshedtopo_export();
  py_erosball_export();
  py_medianfilter_export();

  // the skeleton function
  py_skeleton_im_int_int_void_export();
  py_skeleton_im_im_int_void_export();
  py_skeleton_im_int_int_im_export();
  py_skeleton_im_im_int_im_export();
  py_skeleton_im_int_int_int_export();
  py_skeleton_im_im_int_int_export();

  py_zoom_export();
  py_long2byte_export();

  py_dilat_export();
  py_eros_export();
  py_geodilat_export();
  py_geoeros_export();
  py_geoeros_export();
  py_opening_export();
  py_drawcurve_export();
  
  py_maxflow_export();

//  py_specialize_export();

  uiSqhool_object_export();
  py_gradient_export();

  py_float2byte_export();
  py_minmaxval_export();


  INCLUDE_WRAPPER(resample_image);

  // here are the image objects ( char_image, short_image, int_image, float_image, double_image )
  // there is a template in pyujimage.hpp to help them export without rewritting all the declarations

  ujoi_object_export < char_image, unsigned char > (
    "char_image",
    "This is the image object for 1 byte 'char' images"
    );


  ujoi_object_export < short_image, unsigned short int > (
    "short_image",
    "This is the image object for 2 byte 'short int' images"
    );


  ujoi_object_export < int_image, unsigned /*long*/ int > ( // LONG INT is 8 byte's on 64 bit system
    "int_image",
    "This is the image object for 4 byte 'long int' images. "
    "Note that on 32bit systems it's equivalent with c++ 'int'. "
    "However while 'int' can change on 64bit systems, 'long int' "
    "should remain 32bit." 
    );

  ujoi_object_export < float_image, float > (
    "float_image",
    "This is the image object for 4 byte 'float' images"
    );

  ujoi_object_export < double_image, double > (
    "double_image",
    "This is the image object for 8 byte 'double' images"
    );

};



































// LuM end of file
